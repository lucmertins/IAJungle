package br.com.mertins.viewgame;

import br.com.mertins.ufpel.fia.gameengine.elements.Jogador;
import br.com.mertins.ufpel.fia.gameengine.elements.Peca;
import br.com.mertins.ufpel.fia.gameengine.elements.Tabuleiro;
import br.com.mertins.ufpel.fia.gameengine.elements.Tabuleiro.Posicao;
import br.com.mertins.ufpel.fia.network.Conexao;
import br.com.mertins.ufpel.fia.network.Mensagem;
import static br.com.mertins.ufpel.fia.network.Mensagem.TipoMsg.CHEGOUTOCA;
import static br.com.mertins.ufpel.fia.network.Mensagem.TipoMsg.COMEUTODASPECAS;
import static br.com.mertins.ufpel.fia.network.Mensagem.TipoMsg.CONEXAOENCERRADA;
import static br.com.mertins.ufpel.fia.network.Mensagem.TipoMsg.JOGADA;
import static br.com.mertins.ufpel.fia.network.Mensagem.TipoMsg.JOGADAINVALIDA;
import static br.com.mertins.ufpel.fia.network.Mensagem.TipoMsg.JOGOESTABELECIDO;
import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author mertins
 */
public class FormClient extends javax.swing.JFrame implements TabuleiroEvent {

    /**
     * Creates new form FormClient
     */
    public FormClient() {
        initComponents();
        this.jtabuleiro.addEventClick(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btConectar = new javax.swing.JButton();
        jtabuleiro = new br.com.mertins.viewgame.JTabuleiro();
        btMovimento = new javax.swing.JButton();
        lbMensagem = new javax.swing.JLabel();
        lbJogador = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMovimento = new javax.swing.JTextField();
        cmbPeca = new javax.swing.JComboBox<>();
        txtHelp = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        btConectar.setText("Conectar");
        btConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConectarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jtabuleiroLayout = new javax.swing.GroupLayout(jtabuleiro);
        jtabuleiro.setLayout(jtabuleiroLayout);
        jtabuleiroLayout.setHorizontalGroup(
            jtabuleiroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 423, Short.MAX_VALUE)
        );
        jtabuleiroLayout.setVerticalGroup(
            jtabuleiroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 421, Short.MAX_VALUE)
        );

        btMovimento.setText("Realizar Jogada");
        btMovimento.setEnabled(false);
        btMovimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMovimentoActionPerformed(evt);
            }
        });

        lbMensagem.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbJogador.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Jogador");

        txtMovimento.setEnabled(false);

        cmbPeca.setEnabled(false);
        cmbPeca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPecaActionPerformed(evt);
            }
        });

        txtHelp.setEditable(false);

        jLabel3.setText("para");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Utilize o botão 1 para selecionar a peça\nE o botão 2 para indicar o destino.");
        jTextArea1.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbMensagem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbJogador, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btMovimento, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(txtHelp, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbPeca, javax.swing.GroupLayout.Alignment.LEADING, 0, 134, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtMovimento, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtabuleiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btConectar)
                        .addGap(37, 37, 37)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbJogador, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbPeca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMovimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHelp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btMovimento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jtabuleiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConectarActionPerformed
        if (conexao == null) {
            btConectar.setEnabled(false);
            conexao = new Conexao();
            try {
                conexao.conectarServidor("localhost");
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            jogar();
                        } catch (IOException ex) {
                            Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, "Falha de IO", ex);
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, "Classe não foi encontrada", ex);
                        } finally {
                            if (conexao != null) {
                                conexao.close();
                                conexao = null;
                            }
                            btConectar.setEnabled(true);
                        }
                    }
                }.start();
            } catch (IOException ex) {
                conexao.close();
                conexao = null;
                btConectar.setEnabled(true);
                Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, "Falha ao conectar", ex);
                JOptionPane.showMessageDialog(this, "Servidor não responde a conexão");
            }
        }
    }//GEN-LAST:event_btConectarActionPerformed

    private void btMovimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMovimentoActionPerformed
        if (valida()) {
            enableCompontes(false);
            Mensagem msg = new Mensagem();
            msg.setJogador(this.conexao.getJogador());
            msg.setTipo(Mensagem.TipoMsg.JOGADA);

            Peca peca = (Peca) ((ComboItem) this.cmbPeca.getModel().getSelectedItem()).value;
            msg.setTipoPeca(peca.getTipo());
            Posicao posicaoOri = conexao.getTabuleiro().posicao(this.conexao.getJogador(), peca);
            msg.setPosicaoAtual(posicaoOri);
            Posicao posicaoDest = Tabuleiro.Posicao.valueOf(txtMovimento.getText().trim().toUpperCase());
            msg.setPosicaoNova(posicaoDest);

            try {
                conexao.enviar(msg);
            } catch (IOException ex) {
                conexao.close();
                conexao = null;
                btConectar.setEnabled(true);
                Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, "Falha ao excrever", ex);
                JOptionPane.showMessageDialog(this, "Não foi possível escrever no servidor");
            }
        }
    }//GEN-LAST:event_btMovimentoActionPerformed

    private void cmbPecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPecaActionPerformed
        Peca peca = (Peca) ((ComboItem) this.cmbPeca.getModel().getSelectedItem()).value;
        Posicao posicao = conexao.getTabuleiro().posicao(this.conexao.getJogador(), peca);
        txtHelp.setText(String.format("%s", posicao));
    }//GEN-LAST:event_cmbPecaActionPerformed

    private boolean valida() {
        if (txtMovimento.getText().trim().length() == 0) {
            lbMensagem.setText("Movimento precisa ser informado");
            return false;
        }
        try {
            Tabuleiro.Posicao.valueOf(txtMovimento.getText().trim().toUpperCase());
        } catch (Exception ex) {
            lbMensagem.setText("Posicao inválida");
            return false;
        }
        return true;
    }

    private void enableCompontes(boolean enable) {
        btMovimento.setEnabled(enable);
        txtMovimento.setEnabled(enable);
        cmbPeca.setEnabled(enable);
    }

    private void atualizaCmb(Tabuleiro tabuleiro) {
        this.cmbPeca.setModel(new DefaultComboBoxModel(gera(tabuleiro.pecasNoTabuleiro(conexao.getJogador())).toArray()));
        this.cmbPecaActionPerformed(null);
    }

    private void jogar() throws IOException, ClassNotFoundException {
        boolean conectado = true;
        while (conectado) {
            Mensagem receber = conexao.receber();
            lbMensagem.setText(String.format("%s %s", receber.getTipo().toString(), receber.getJogador() == null ? "" : receber.getJogador()));
            switch (receber.getTipo()) {
                case JOGOESTABELECIDO:
                    Tabuleiro tabuleiro = new Tabuleiro(receber.getTabuleiroState());
                    conexao.setJogador(receber.getJogador());
                    conexao.setTabuleiro(tabuleiro);
                    lbJogador.setText(conexao.getJogador().toString());
                    lbJogador.setOpaque(true);
                    lbJogador.setBackground(conexao.getJogador() == Jogador.Jogador1 ? Color.yellow : Color.green);
                    jtabuleiro.setTabuleiroState(receber.getTabuleiroState());
                    this.txtMovimento.setText(null);
                    if (conexao.getJogador() == Jogador.Jogador1) {
                        enableCompontes(true);
                    } else {
                        enableCompontes(false);
                    }
                    this.atualizaCmb(tabuleiro);
                    break;
                case JOGADAINVALIDA:
                case JOGADA:
                    Tabuleiro tab = new Tabuleiro(receber.getTabuleiroState());
                    jtabuleiro.setTabuleiroState(receber.getTabuleiroState());
                    conexao.setTabuleiro(tab);
                    if (receber.getJogador() == conexao.getJogador()) {
                        this.atualizaCmb(tab);
                        enableCompontes(true);
                        txtMovimento.setText(null);
                        txtMovimento.requestFocus();
                        if (receber.getPosicaoNova() != null) {  // se não for a primeira jogada
                            lbMensagem.setText(String.format("%s moveu %s para %s",
                                    conexao.getJogador() == Jogador.Jogador1 ? Jogador.Jogador2 : Jogador.Jogador1,
                                    receber.getTipoPeca().descricao(), receber.getPosicaoNova()));
                        }
                    }
                    break;
                case CHEGOUTOCA:
                case COMEUTODASPECAS:
                    tab = new Tabuleiro(receber.getTabuleiroState());
                    jtabuleiro.setTabuleiroState(receber.getTabuleiroState());
                    if (receber.getJogador() == conexao.getJogador()) {
                        enableCompontes(false);
                        JOptionPane.showMessageDialog(this, "Voce ganhou!");
                    } else {
                        enableCompontes(false);
                        JOptionPane.showMessageDialog(this, "Voce perdeu!");
                    }
                case CONEXAOENCERRADA:
                    conectado = false;
                    btConectar.setEnabled(true);
                    lbJogador.setText(null);
                    lbJogador.setOpaque(false);
                    conexao.close();
                    conexao = null;
                    enableCompontes(false);
                    break;
            }
        }
    }

    private List<ComboItem> gera(List<Peca> pecas) {
        List<ComboItem> result = new ArrayList<>();
        for (Peca peca : pecas) {
            result.add(new ComboItem(peca, peca.getTipo().descricao()));
        }
        return result;
    }

    @Override
    public void eventClick(Botao bota, String local) {
        if (this.conexao.getStatus() == Conexao.Status.JOGANDO) {
            Tabuleiro tabuleiro = this.conexao.getTabuleiro();
            Peca peca = tabuleiro.peca(this.conexao.getJogador(), Posicao.valueOf(local.toUpperCase()));
            if (bota == Botao.BUTTON1) {
                if (peca == null) {
                    lbMensagem.setText("Seleção inválida");
                } else {
                    lbMensagem.setText(null);
                    txtHelp.setText(local);
                    ComboItem elemCmb = new ComboItem(peca, peca.getTipo().descricao());
                    cmbPeca.setSelectedItem(elemCmb);
                }

            } else {
                if (peca == null) {
                    txtMovimento.setText(local);
                    lbMensagem.setText(null);
                } else {
                    lbMensagem.setText("Seleção inválida");
                }
            }
        }
    }

    private class ComboItem {

        private Peca value;
        private final String label;

        public ComboItem(Peca value, String label) {
            this.value = value;
            this.label = label;
        }

        @Override
        public String toString() {
            return label;
        }

        @Override
        public int hashCode() {
            int hash = 7;
            hash = 23 * hash + Objects.hashCode(this.value);
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final ComboItem other = (ComboItem) obj;
            if (!Objects.equals(this.value, other.value)) {
                return false;
            }
            return true;
        }

    }

    private Conexao conexao;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConectar;
    private javax.swing.JButton btMovimento;
    private javax.swing.JComboBox<String> cmbPeca;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private br.com.mertins.viewgame.JTabuleiro jtabuleiro;
    private javax.swing.JLabel lbJogador;
    private javax.swing.JLabel lbMensagem;
    private javax.swing.JTextField txtHelp;
    private javax.swing.JTextField txtMovimento;
    // End of variables declaration//GEN-END:variables
}
